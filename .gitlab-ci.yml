stages:
  - Image Build
  - Image Scan
  - Deployment
  - Restart Pods
  

include:
  - project: 'DSO/DASTScanner'
    file: '.gitlab-ci.yml'
  - remote: 'https://gitlab.com/prismacloud-public/shift-left/extension/-/raw/master/.pcs.gitlab-ci.yml'

CopyDevImages:
  stage: Image Build
  tags:
    - ${KUBECTL_RUNNER}
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir -p /workspace
    # Cyanweb Flask Image:
    - echo "FROM ghcr.io/usepa/cyanweb-api:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cyanweb-api:$CI_COMMIT_REF_NAME
    # Cyanweb Angular Image:
    - echo "FROM ghcr.io/usepa/cyanweb-angular:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cyanweb-angular:$CI_COMMIT_REF_NAME
    # Cyanweb Nginx Image:
    - echo "FROM ghcr.io/usepa/cyanweb-nginx:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cyanweb-nginx:$CI_COMMIT_REF_NAME
    # Cyanweb MySQL Image:
    - echo "FROM ghcr.io/usepa/cyanweb-db:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cyanweb-db:$CI_COMMIT_REF_NAME
    # Cyanweb Redis Image:
    - echo "FROM ghcr.io/usepa/cyanweb-redis:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cyanweb-redis:$CI_COMMIT_REF_NAME
  environment:
    name: ${KUBECTL_ENV}
    url: ${KUBECTL_URL}
    kubernetes:
      namespace: ${KUBECTL_NAMESPACE}

ApplyManifests:
  stage: Deployment
  tags:
    - ${KUBECTL_RUNNER}
  when: manual
  image: dtzar/helm-kubectl
  script:
    - apk add gettext
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - envsubst < k8s/cyanweb-configmap.yml | kubectl apply -f -
    - envsubst < k8s/cyanweb-celery-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cyanweb-flask-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cyanweb-flask-service.yml | kubectl apply -f -
    - envsubst < k8s/cyanweb-mysql-service.yml | kubectl apply -f -
    - envsubst < k8s/cyanweb-mysql-sts.yml | kubectl apply -f -
    - envsubst < k8s/cyanweb-nginx-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cyanweb-nginx-service.yml | kubectl apply -f -
    - envsubst < k8s/cyanweb-redis-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cyanweb-redis-service.yml | kubectl apply -f -
  environment:
    name: ${KUBECTL_ENV}
    url: ${KUBECTL_URL}
    kubernetes:
      namespace: ${KUBECTL_NAMESPACE}

DeleteManifests:
  stage: Deployment
  tags:
    - ${KUBECTL_RUNNER}
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - kubectl delete -f k8s/cyanweb-configmap.yml
    - kubectl delete -f k8s/cyanweb-celery-deployment.yml
    - kubectl delete -f k8s/cyanweb-flask-deployment.yml
    - kubectl delete -f k8s/cyanweb-flask-service.yml
    - kubectl delete -f k8s/cyanweb-mysql-service.yml
    - kubectl delete -f k8s/cyanweb-mysql-sts.yml
    - kubectl delete -f k8s/cyanweb-nginx-deployment.yml
    - kubectl delete -f k8s/cyanweb-nginx-service.yml
    - kubectl delete -f k8s/cyanweb-redis-deployment.yml
    - kubectl delete -f k8s/cyanweb-redis-service.yml
  environment:
    name: ${KUBECTL_ENV}
    url: ${KUBECTL_URL}
    kubernetes:
      namespace: ${KUBECTL_NAMESPACE}

ApplyPVC:
  stage: Deployment
  tags:
    - ${KUBECTL_RUNNER}
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - kubectl apply -f k8s/cyanweb-pvcs.yml
  environment:
    name: ${KUBECTL_ENV}
    url: ${KUBECTL_URL}
    kubernetes:
      namespace: ${KUBECTL_NAMESPACE}

# ScalePods:
#   stage: Restart Pods
#   tags:
#     - ${KUBECTL_RUNNER}
#   when: manual
#   image: dtzar/helm-kubectl
#   script:
#     - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
#     - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
#     - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
#     - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
#     - kubectl config use-context default
#     - kubectl scale deployment cyanweb-flask --replicas=0
#     - kubectl scale deployment cyanweb-flask --replicas=1
#     - kubectl scale deployment cyanweb-celery --replicas=0
#     - kubectl scale deployment cyanweb-celery --replicas=1
#     - kubectl scale deployment cyanweb-mysql --replicas=0
#     - kubectl scale deployment cyanweb-mysql --replicas=1
#     - kubectl scale deployment cyanweb-redis --replicas=0
#     - kubectl scale deployment cyanweb-redis --replicas=1
#     - kubectl scale deployment cyanweb-nginx --replicas=0
#     - kubectl scale deployment cyanweb-nginx --replicas=1
#   environment:
#     name: ${KUBECTL_ENV}
#     url: ${KUBECTL_URL}
#     kubernetes:
#       namespace: ${KUBECTL_NAMESPACE}

# ApiImageScan:
#   stage: Image Scan
#   extends:
#     - .pcs_compute_scan
#   tags:
#     - twistcli
#   when: manual
#   allow_failure: false
#   variables:
#     prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
#     GIT_STRATEGY: clone
#     prisma_cloud_scan_image: "registry.epa.gov/qed/cyanweb_kube/cyanweb-api:dev-gl"
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
#     - docker pull $prisma_cloud_scan_image
#     - ./image_scan.sh

# MysqlImageScan:
#   stage: Image Scan
#   extends:
#     - .pcs_compute_scan
#   tags:
#     - twistcli
#   when: manual
#   allow_failure: false
#   variables:
#     prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
#     GIT_STRATEGY: clone
#     prisma_cloud_scan_image: "registry.epa.gov/qed/cyanweb_kube/cyanweb-db:dev-gl"
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
#     - docker pull $prisma_cloud_scan_image
#     - ./image_scan.sh

# AngularImageScan:
#   stage: Image Scan
#   extends:
#     - .pcs_compute_scan
#   tags:
#     - twistcli
#   when: manual
#   allow_failure: false
#   variables:
#     prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
#     GIT_STRATEGY: clone
#     prisma_cloud_scan_image: "registry.epa.gov/qed/cyanweb_kube/cyanweb-angular:dev-gl"
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
#     - docker pull $prisma_cloud_scan_image
#     - ./image_scan.sh

# NginxImageScan:
#   stage: Image Scan
#   extends:
#     - .pcs_compute_scan
#   tags:
#     - twistcli
#   when: manual
#   allow_failure: false
#   variables:
#     prisma_cloud_compute_url: "https://prismacloud.gitlab-prod.aws.epa.gov"
#     GIT_STRATEGY: clone
#     prisma_cloud_scan_image: "registry.epa.gov/qed/cyanweb_kube/cyanweb-nginx:dev-gl"
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.epa.gov
#     - docker pull $prisma_cloud_scan_image
#     - ./image_scan.sh
