stages:
  - Image Build
  - Image Scan
  - Deployment
  - Restart Pods
  

include:
  - project: 'DSO/DASTScanner'
    file: '.gitlab-ci.yml'
  - remote: 'https://gitlab.com/prismacloud-public/shift-left/extension/-/raw/master/.pcs.gitlab-ci.yml'
  - local: 'version.yml'

CopyDevImages:
  stage: Image Build
  tags:
    - qed-stg-runner
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir -p /workspace
    # Cyanweb Flask Image:
    - echo "FROM ghcr.io/usepa/cyanweb-api:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cyanweb-api:$CI_COMMIT_REF_NAME
    # Cyanweb Angular Image:
    - echo "FROM ghcr.io/usepa/cyanweb-angular:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cyanweb-angular:$CI_COMMIT_REF_NAME
    # Cyanweb Nginx Image:
    - echo "FROM ghcr.io/usepa/cyanweb-nginx:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cyanweb-nginx:$CI_COMMIT_REF_NAME
    # Cyanweb MySQL Image:
    - echo "FROM ghcr.io/usepa/cyanweb-db:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cyanweb-db:$CI_COMMIT_REF_NAME
    # Cyanweb Redis Image:
    - echo "FROM ghcr.io/usepa/cyanweb-redis:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cyanweb-redis:$CI_COMMIT_REF_NAME
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

SetProdImages:
  stage: Image Build
  tags:
    - qed-stg-runner
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir -p /workspace
    # Cyanweb Flask Image:
    - echo "FROM ghcr.io/usepa/cyanweb-api:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cyanweb-api:main-$PROD_VERSION
    # Cyanweb Angular Image:
    - echo "FROM ghcr.io/usepa/cyanweb-angular:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cyanweb-angular:main-$PROD_VERSION
    # Cyanweb Nginx Image:
    - echo "FROM ghcr.io/usepa/cyanweb-nginx:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cyanweb-nginx:main-$PROD_VERSION
    # Cyanweb MySQL Image:
    - echo "FROM ghcr.io/usepa/cyanweb-db:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cyanweb-db:main-$PROD_VERSION
    # Cyanweb Redis Image:
    - echo "FROM ghcr.io/usepa/cyanweb-redis:dev-kube" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/cyanweb-redis:main-$PROD_VERSION
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

ApplyManifests:
  stage: Deployment
  tags:
    - qed-stg-runner
  when: manual
  image: dtzar/helm-kubectl
  script:
    - apk add gettext
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - envsubst < k8s/cyanweb-configmap.yml | kubectl apply -f -
    - envsubst < k8s/cyanweb-celery-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cyanweb-flask-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cyanweb-flask-service.yml | kubectl apply -f -
    - envsubst < k8s/cyanweb-mysql-service.yml | kubectl apply -f -
    - envsubst < k8s/cyanweb-mysql-sts.yml | kubectl apply -f -
    - envsubst < k8s/cyanweb-nginx-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cyanweb-nginx-service.yml | kubectl apply -f -
    - envsubst < k8s/cyanweb-redis-deployment.yml | kubectl apply -f -
    - envsubst < k8s/cyanweb-redis-service.yml | kubectl apply -f -
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

DeleteManifests:
  stage: Deployment
  tags:
    - qed-stg-runner
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - kubectl delete -f k8s/cyanweb-configmap.yml
    - kubectl delete -f k8s/cyanweb-celery-deployment.yml
    - kubectl delete -f k8s/cyanweb-flask-deployment.yml
    - kubectl delete -f k8s/cyanweb-flask-service.yml
    - kubectl delete -f k8s/cyanweb-mysql-service.yml
    - kubectl delete -f k8s/cyanweb-mysql-sts.yml
    - kubectl delete -f k8s/cyanweb-nginx-deployment.yml
    - kubectl delete -f k8s/cyanweb-nginx-service.yml
    - kubectl delete -f k8s/cyanweb-redis-deployment.yml
    - kubectl delete -f k8s/cyanweb-redis-service.yml
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

ApplyPVC:
  stage: Deployment
  tags:
    - qed-stg-runner
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - kubectl apply -f k8s/cyanweb-pvcs.yml
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

# ScalePods:
#   stage: Restart Pods
#   tags:
#     - qed-stg-runner
#   when: manual
#   image: dtzar/helm-kubectl
#   script:
#     - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
#     - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
#     - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
#     - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
#     - kubectl config use-context default
#     - kubectl scale deployment cyanweb-flask --replicas=0
#     - kubectl scale deployment cyanweb-flask --replicas=1
#     - kubectl scale deployment cyanweb-celery --replicas=0
#     - kubectl scale deployment cyanweb-celery --replicas=1
#     - kubectl scale deployment cyanweb-mysql --replicas=0
#     - kubectl scale deployment cyanweb-mysql --replicas=1
#     - kubectl scale deployment cyanweb-redis --replicas=0
#     - kubectl scale deployment cyanweb-redis --replicas=1
#     - kubectl scale deployment cyanweb-nginx --replicas=0
#     - kubectl scale deployment cyanweb-nginx --replicas=1
#   environment:
#     name: stg
#     url: http://qed.qed-stage.aws.epa.gov
#     kubernetes:
#       namespace: qed-45-stg

Api Prisma Scan:
  stage: Image Scan
  tags:
    - twistcli
  when: manual
  variables:
    GIT_STRATEGY: none
  script:
    - 'export PRISMA_CI_TOKEN=$(curl -kH "Content-Type: application/json" -d "{\"username\":\"$prisma_cloud_compute_username\", \"password\":\"$prisma_cloud_compute_password\"}" https://prismacloud.epa.gov/api/v22.12/authenticate | jq -r .token)'
    - 'curl --progress-bar -L -k --header "Authorization: Bearer $PRISMA_CI_TOKEN" https://prismacloud.epa.gov/api/v1/util/twistcli > twistcli; chmod a+x twistcli;'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/cyanweb-api:$CI_COMMIT_REF_NAME
    - ./twistcli images scan $CI_REGISTRY_IMAGE/cyanweb-api:$CI_COMMIT_REF_NAME --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN
  after_script:
    - rm -rf $CI_PROJECT_DIR

Mysql Prisma Scan:
  stage: Image Scan
  tags:
    - twistcli
  when: manual
  variables:
    GIT_STRATEGY: none
  script:
    - 'export PRISMA_CI_TOKEN=$(curl -kH "Content-Type: application/json" -d "{\"username\":\"$prisma_cloud_compute_username\", \"password\":\"$prisma_cloud_compute_password\"}" https://prismacloud.epa.gov/api/v22.12/authenticate | jq -r .token)'
    - 'curl --progress-bar -L -k --header "Authorization: Bearer $PRISMA_CI_TOKEN" https://prismacloud.epa.gov/api/v1/util/twistcli > twistcli; chmod a+x twistcli;'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/cyanweb-db:$CI_COMMIT_REF_NAME
    - ./twistcli images scan $CI_REGISTRY_IMAGE/cyanweb-db:$CI_COMMIT_REF_NAME --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN
  after_script:
    - rm -rf $CI_PROJECT_DIR

Angular Prisma Scan:
  stage: Image Scan
  tags:
    - twistcli
  when: manual
  variables:
    GIT_STRATEGY: none
  script:
    - 'export PRISMA_CI_TOKEN=$(curl -kH "Content-Type: application/json" -d "{\"username\":\"$prisma_cloud_compute_username\", \"password\":\"$prisma_cloud_compute_password\"}" https://prismacloud.epa.gov/api/v22.12/authenticate | jq -r .token)'
    - 'curl --progress-bar -L -k --header "Authorization: Bearer $PRISMA_CI_TOKEN" https://prismacloud.epa.gov/api/v1/util/twistcli > twistcli; chmod a+x twistcli;'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/cyanweb-angular:$CI_COMMIT_REF_NAME
    - ./twistcli images scan $CI_REGISTRY_IMAGE/cyanweb-angular:$CI_COMMIT_REF_NAME --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN
  after_script:
    - rm -rf $CI_PROJECT_DIR

Nginx Prisma Scan:
  stage: Image Scan
  tags:
    - twistcli
  when: manual
  variables:
    GIT_STRATEGY: none
  script:
    - 'export PRISMA_CI_TOKEN=$(curl -kH "Content-Type: application/json" -d "{\"username\":\"$prisma_cloud_compute_username\", \"password\":\"$prisma_cloud_compute_password\"}" https://prismacloud.epa.gov/api/v22.12/authenticate | jq -r .token)'
    - 'curl --progress-bar -L -k --header "Authorization: Bearer $PRISMA_CI_TOKEN" https://prismacloud.epa.gov/api/v1/util/twistcli > twistcli; chmod a+x twistcli;'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/cyanweb-nginx:$CI_COMMIT_REF_NAME
    - ./twistcli images scan $CI_REGISTRY_IMAGE/cyanweb-nginx:$CI_COMMIT_REF_NAME --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN
  after_script:
    - rm -rf $CI_PROJECT_DIR
